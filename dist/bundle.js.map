{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://skypro-game/./src/script.js"],"sourcesContent":["import '/static/style.css';\nimport '/static/cards.css';\n\nwindow.application = {\n    blocks: {\n        'start-button': renderStartButton,\n        'restart-button': renderRestartButton,\n    },\n    token: {},\n    id: {},\n    screens: {\n        start: renderStartScreen,\n        game: renderGameScreen,\n    },\n    renderScreen: function (screenName) {\n        this.screens[screenName]();\n    },\n    renderBlock: function (blockName, container) {\n        this.blocks[blockName](container);\n    },\n    level: [],\n};\n\nfunction renderStartButton(container) {\n    const startButton = document.createElement('button');\n    startButton.textContent = 'Start';\n    startButton.classList.add('startScreen__button');\n\n    startButton.addEventListener('click', () => {\n        window.application.level = document.querySelector(\n            'input[name=\"difficulty\"]:checked'\n        ).id;\n\n        let numCards;\n        if (window.application.level === '1') {\n            numCards = numCardsEasy;\n        } else if (window.application.level === '2') {\n            numCards = numCardsMedium;\n        } else if (window.application.level === '3') {\n            numCards = numCardsDifficult;\n        }\n\n        const cards = generateCards(numCards);\n\n        renderGameScreen(cards);\n    });\n\n    container.appendChild(startButton);\n}\n\nfunction renderStartScreen() {\n    const app = document.querySelector('.app');\n    app.textContent = '';\n\n    const background = document.createElement('div');\n    background.classList.add('startScreen__background');\n\n    const title = document.createElement('h1');\n    title.textContent = 'Choose difficulty';\n    title.classList.add('startScreen__title');\n\n    const content = document.createElement('div');\n    content.classList.add('startScreen__content');\n\n    app.appendChild(background);\n    background.appendChild(title);\n\n    for (let i = 1; i <= 3; i++) {\n        const label = document.createElement('label');\n        label.classList.add('startScreen__label');\n        label.htmlFor = i;\n        label.textContent = i;\n        const input = document.createElement('input');\n        input.classList.add('startScreen__input');\n        input.id = i;\n        input.setAttribute('type', 'radio');\n        input.setAttribute('name', 'difficulty');\n\n        background.appendChild(content);\n        content.appendChild(input);\n        content.appendChild(label);\n    }\n\n    window.application.renderBlock('start-button', background);\n}\n\nwindow.application.renderScreen('start');\n\nconst suits = ['hearts', 'diamonds', 'clubs', 'spades'];\nconst ranks = ['6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\n\nconst numCardsEasy = 6;\nconst numCardsMedium = 12;\nconst numCardsDifficult = 18;\n\nfunction generateCards(numCards) {\n    const cards = [];\n\n    for (let i = 0; i < numCards / 2; i++) {\n        const suit = suits[Math.floor(Math.random() * suits.length)];\n        const rank = ranks[Math.floor(Math.random() * ranks.length)];\n        cards.push({ suit, rank });\n        cards.push({ suit, rank });\n    }\n\n    for (let i = cards.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [cards[i], cards[j]] = [cards[j], cards[i]];\n    }\n\n    return cards;\n}\n\nfunction renderRestartButton(container) {\n    const restartButton = document.createElement('button');\n    restartButton.textContent = 'Restart';\n    restartButton.classList.add('gameScreen__button');\n\n    restartButton.addEventListener('click', () => {\n        let numCards;\n        if (window.application.level === '1') {\n            numCards = numCardsEasy;\n        } else if (window.application.level === '2') {\n            numCards = numCardsMedium;\n        } else if (window.application.level === '3') {\n            numCards = numCardsDifficult;\n        }\n\n        const cards = generateCards(numCards);\n\n        renderGameScreen(cards);\n    });\n\n    container.appendChild(restartButton);\n}\n\nfunction renderGameScreen(cards) {\n    const app = document.querySelector('.app');\n    app.textContent = '';\n\n    const topboard = document.createElement('div');\n    topboard.classList.add('gameScreen__topboard');\n    topboard.classList.add('center');\n\n    const board = document.createElement('div');\n    board.classList.add('gameScreen__board');\n    board.classList.add('center');\n\n    for (let i = 0; i < cards.length; i++) {\n        const card = document.createElement('div');\n        card.classList.add('gameScreen__card');\n        card.dataset.index = i;\n        card.dataset.suit = cards[i].suit;\n        card.dataset.rank = cards[i].rank;\n\n        const front = document.createElement('div');\n        front.classList.add('gameScreen__front');\n        front.classList.add(cards[i].suit + cards[i].rank);\n        front.style.backgroundImage = `url(./dist/img/cards/${cards[i].suit}/${cards[i].rank}.svg`;\n\n        const back = document.createElement('div');\n        back.classList.add('gameScreen__back');\n        back.style.backgroundImage = `url(./dist/img/рубашка.svg)`;\n\n        card.appendChild(front);\n        card.appendChild(back);\n        board.appendChild(card);\n\n        setTimeout(() => {\n            card.classList.add('flipped');\n        }, 5000);\n    }\n\n    app.appendChild(topboard);\n    app.appendChild(board);\n\n    const timerCount = document.createElement('div');\n    timerCount.classList.add('gameScreen__timer');\n    let time = 0;\n    const timerInterval = setInterval(() => {\n        const minutes = Math.floor(time / 60)\n            .toString()\n            .padStart(2, '0');\n        const seconds = (time % 60).toString().padStart(2, '0');\n        timerCount.textContent = `${minutes}:${seconds}`;\n        time++;\n    }, 1000);\n    topboard.appendChild(timerCount);\n    window.application.renderBlock('restart-button', topboard);\n\n    const endTimer = () => {\n        clearInterval(timerInterval);\n    };\n\n    function showModal(won, timeTaken) {\n        const overlay = document.querySelector('.overlay');\n        const modalHeader = document.querySelector('.modal-header-text');\n        const modalImage = document.querySelector('.modal-image');\n        const modalTimeTaken = document.querySelector('.modal-time-taken');\n        const modalTime = document.querySelector('.modal-time');\n\n        // Set modal header text and image based on whether the player won or lost\n        if (won) {\n            modalHeader.textContent = 'Congratulations!';\n            modalImage.src = 'dist/img/Image.png';\n        } else {\n            modalHeader.textContent = 'Sorry, you lost.';\n            modalImage.src = 'dist/img/Image-2.png';\n        }\n\n        // Set modal time taken text\n        const minutes = Math.floor(timeTaken / 60);\n        const seconds = timeTaken % 60;\n        modalTimeTaken.textContent = `Time taken:`;\n        modalTime.textContent = `${minutes\n            .toString()\n            .padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n\n        // Show the modal\n        overlay.style.display = 'block';\n\n        // Set up event listener for restart button\n        const restartButton = document.querySelector('.modal-restart-button');\n        restartButton.addEventListener('click', () => {\n            overlay.style.display = 'none';\n            window.application.renderScreen('start');\n        });\n\n        // Set up event listener for close button\n        const closeButton = document.querySelector('.close');\n        closeButton.addEventListener('click', () => {\n            overlay.style.display = 'none';\n        });\n    }\n\n    let flippedCard = null;\n    let matchedCards = 0;\n\n    function flipCard(card) {\n        console.log(card);\n        console.log(flippedCard);\n        console.log(this);\n        if (flippedCard === null) {\n            this.classList.remove('flipped');\n            flippedCard = this;\n            console.log(flippedCard);\n        } else if (this === flippedCard) {\n            return;\n        } else {\n            this.classList.remove('flipped');\n            if (\n                flippedCard.dataset.rank === this.dataset.rank &&\n                flippedCard.dataset.suit === this.dataset.suit\n            ) {\n                matchedCards++;\n                flippedCard = null;\n                if (matchedCards === cards.length / 2) {\n                    endTimer();\n                    showModal(true, time);\n                    console.log(`you have won`);\n                }\n            } else {\n                endTimer();\n                showModal(false, time);\n                console.log(`game over`);\n            }\n        }\n    }\n\n    const createdCards = document.querySelectorAll('.gameScreen__card');\n\n    console.log(createdCards);\n\n    for (let i = 0; i < createdCards.length; i++) {\n        createdCards[i].addEventListener(\n            'click',\n            flipCard.bind(createdCards[i])\n        );\n    }\n}\n"],"names":["window","application","blocks","container","startButton","document","createElement","textContent","classList","add","addEventListener","numCards","level","querySelector","id","numCardsEasy","numCardsMedium","numCardsDifficult","renderGameScreen","generateCards","appendChild","restartButton","token","screens","start","app","background","title","content","i","label","htmlFor","input","setAttribute","renderBlock","game","renderScreen","screenName","this","blockName","suits","ranks","cards","suit","Math","floor","random","length","rank","push","j","topboard","board","card","dataset","index","front","style","backgroundImage","back","setTimeout","timerCount","time","timerInterval","setInterval","minutes","toString","padStart","seconds","endTimer","clearInterval","showModal","won","timeTaken","overlay","modalHeader","modalImage","modalTimeTaken","modalTime","src","display","flippedCard","matchedCards","flipCard","console","log","remove","createdCards","querySelectorAll","bind"],"sourceRoot":""}